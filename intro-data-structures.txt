1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a.) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

var people = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b.) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

function addPerson(name) {
  people.push(name);
  return people
}

c.) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

function findPerson(person) {
  var searchResults = people.indexOf(person)
  if (searchResults !== -1) {
    return searchResults
  }
    return "This person is not in line."
}

d.) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

See above; I recommend the function return a statement saying that the person they are searching for is not in line.

e.) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

function cutInLine(personInLine, personCutting) {
  var currentPersonIndex = people.indexOf(personInLine);
  people.splice(currentPersonIndex, 0, personCutting)
  return people;
}

f.) If Patrick wants to leave the line, how would you delete him from the array?

function leaveLine(personLeaving) {
  var personIndex = people.indexOf(personLeaving);
  people.splice(personIndex, 1)
  return people;
}

2.Provide another real-world example that you can model using a data structure.

In food service industries, there's a rule called "first in, first out" (FIFO). This rule applies to all perishable items. For example, the oldest package of cheese lined up in the cooler must be at the front, while the newer items—perhaps items that just came in via the delivery truck—are put toward the back. This ensures an efficient rotation of ingredients.

In this case, this FIFO rule could be modeled using an array. The oldest items would be at the beginning (lowest index) of the array, while the newest would be at the end (highest index).

3. How would your data structure allow developers to access and manipulate the data?

Developers would primarily use the .push method to add new ingredients/items to the array, and the .shift method to "use"/remove an ingredient from the beginning of the array. They could also use indexOf to find the index of certain ingredients.


