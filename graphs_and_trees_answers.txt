QUESTIONS:

What is a binary tree and what makes it unique to other trees?
A binary tree data structure starts with a single root node and branches out into a max of two child nodes (a right child and a left child) per parent node. 

What is a heuristic?

A heuristic is a "best guess" that developers use to estimate solutions to functions in large data sets. This favors speed at the expense of accuracy. 

What is another problem besides the shortest-path problem that requires the use of heuristics?

A recommendation system—like the one Facebook uses to determine your interests and show relevant content and ads—would require heuristics, because you have to make assumptions in order to present a user with this recommended content. While you can pin down location, gender, and anything else a user has specifically entered, other interests must be gleaned by making assumptions using that user's demographics, or by analyzing what types of content a user has liked or followed in the past.

What is the difference between a depth-first search and a breadth-first search?

A depth-first search follows a path deeper into a data structure (ex. following one branch of a tree down, and repeating with other branches) to find the data it is looking for. A breadth-first search instead starts at the root, but then moves through each "level" or tier in the tree, searching the root, then the topmost nodes of all branches, then the second topmost nodes of all branches, and so on.

Explain in your own words what an undirected, a-cyclic, unweighted graph is.

That would be a graph where movement can only occur in one direction (ex. you can only move forward from one node to the next, never backward); where nodes are not connected in a way that would allow loops from a specific node, out to another node, and eventually back to that specific node, but will instead result in a dead-end; and where paths between nodes are not weighted (ex. the data structure will not know or care which route is the fastest between nodes; it views all routes as the same). 

What kind of graph is a binary search tree?

It's a directed, acyclic, and unweighted graph.

PROGRAMMING QUESTIONS:

1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.


class Node {
  constructor(data){
    this.left = null;
    this.right = null;
    this.data = data;
  }

}

class Tree {
  constructor(){
    this.root = null;
  }
  
  addNode(data) {
    if (this.root === null) {
      this.root = new Node(data);
      return;
    }
    var currentNode = this.root;
    var added = false;
    while (currentNode !== null && !added)
      if (data > currentNode.data) {
        if (currentNode.right === null) {
          currentNode.right = new Node(data);
          added = true;
        }
        else {
          currentNode = currentNode.right;
        }
      }
      else if (data < currentNode.data) {
        if (currentNode.left === null) {
          currentNode.left = new Node(data);
          added = true;
        }
        else {
          currentNode = currentNode.left;
        }
      }
      else {
        console.log("You can't add a duplicate value.");
        return;
      }
  }

  includes(data) {
    var currentNode = this.root;
    while (currentNode !== null) {
      if (data > currentNode.data) {
        if (currentNode.right === null) {
          return false;
        }
        else {
          currentNode = currentNode.right;
        }
      }
      else if (data < currentNode.data) {
        if (currentNode.left === null) {
          return false;
        }
        else {
          currentNode = currentNode.left;
        }
      }
      else {
        return true;
      }
    }
    return false;
  }

}


```

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

Note: I refactored #1 for this. See the code below, or test here: https://repl.it/@NatalieThomas/trees

class Node {
  constructor(data){
    this.left = null;
    this.right = null;
    this.data = data;
  }

}

class Tree {
  constructor(){
    this.root = null;
  }
  
  addNode(data) {
    if (this.root === null) {
      this.root = new Node(data);
      return;
    }
    var currentNode = this.root;
    var added = false;
    while (currentNode !== null && !added)
      if (data > currentNode.data) {
        if (currentNode.right === null) {
          currentNode.right = new Node(data);
          added = true;
        }
        else {
          currentNode = currentNode.right;
        }
      }
      else if (data < currentNode.data) {
        if (currentNode.left === null) {
          currentNode.left = new Node(data);
          added = true;
        }
        else {
          currentNode = currentNode.left;
        }
      }
      else {
        console.log("You can't add a duplicate value.");
        return;
      }
  }

  distance(data) {
    var count = 0;
    var values = [];
    var currentNode = this.root;
    while (currentNode !== null) {
      values[count] = currentNode.data;
      if (data > currentNode.data) {
        if (currentNode.right !== null) {
          count++;
        }

        currentNode = currentNode.right;
      }
      else if (data < currentNode.data) {
        if (currentNode.left !== null) {
          count++;
        }

        currentNode = currentNode.left;
      }
      else {
        values.shift();
        return values;
      }
    }
    return [];
  }

  includes(data) {
    return this.distance(data).length > 0;
  }

  distanceBetween(data1, data2) {
    var distance1 = this.distance(data1);
    var distance2 = this.distance(data2);
    var maxLength = distance1 > distance2 ? distance2 : distance1;
    var distanceLca = 0;
    while (distanceLca < maxLength && distance1[distanceLca] === distance2[distanceLca]){
      distanceLca++;
    }
    return distance1.length + distance2.length - (2 * distanceLca);
  }
}
