1. What is time complexity and what is its relation to algorithms?

Time complexity is a function that measures how long an algorithm takes to run, given the "worst-case" data entered.  
2. What is runtime?
Runtime is the actual duration (time) an algorithm takes to run. 
3. How is the runtime of an algorithm calculated?

Runtime is calculated by first adding up the number of actions the function will execute, in relation to the size of the data entered. Then, reduce the function to the largest portion and remove constants to get the runtime. 
4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

O(1)
O(log n)
O(n)
O(n log n)
O(n^2)
O(2^n)
O(n!) 
5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Exponential:

A pet breeder, such as a rabbit breeder, may start with only two rabbits. But as the breeder breeds additional litters of rabbits, and as those rabbits start to breed, the number of resulting rabbits quickly and exponentially grows. 
6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

O(n)

7. Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

O(n^2)

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

O(1)

9. Out of the code snippets you just saw, which is the most time efficient? 
#6, O(n)