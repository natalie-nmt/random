1. In your own words, explain what clean code is and why it is important.

Clean code is concise, DRY code that also inherently provides enough context and description that developers can understand what the code should do, at a glance. This means function and variable names should be recognizable and easily understood, without having to resort to commenting on each line of code. It's important because it improves the code's readability, thus giving it more staying power—especially when other developers are expected to utilize or contribute to the code. 

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Automated warehouses rely on code written for both the inventory management system, and for the robotic forklifts that move pallets of product around. If the code has any bugs, it could mean a few minutes (or more) of downtime—which would cost the company thousands of dollars, at minimum. 

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

No. First, there are excessive comments throughout the code, and there needs to be more indenting to determine the hierarchy within the function. Also, the function name does not describe what the function does, and the variables do not describe what type of data should be held within it.   
FUNCTION convertTemperature(metric, temp)
  IF metric = 'F' THEN
    SET temp to (temp-32) * (5/9
    PRINT temp
  ELSE IF temp = 'C' then
    SET temp to temp * 1.8000 + 32.00
    PRINT temp
  END IF
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

Yes, because the function and variables are descriptive, the indentation correctly defines the hierarchy of tasks in the function, and it's simple and straightforward.

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.
a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

--My version--

INIT total to subTotal * discountRate + (subTotal * tax)

FUNCTION printTotal(total)
  PRINT "Your total due is: " + total
END FUNCTION

FUNCTION processPayment(paymentType)
  CALL getPayment RETURNING amount  
  IF paymentType = "cash" THEN
    PRINT "Change due: " + amount - total
  ELSE IF paymentType = "credit card" THEN
    PRINT "Your credit card has been charged: " + total
  END IF
END FUNCTION


b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

--My version--

FUNCTION canCheckout(guest)
  RETURN guest.accountActive AND NOT guest.hasOverduebooks AND guest.outstandingfees = 0
END FUNCTION

FUNCTION checkoutBook(book,guest)
  IF canCheckout(guest) THEN
    APPEND book to guest.books
    SET book.status to "Checked Out"
    PRINT "Your books have been issued."
  ELSE 
    RETURN "Unable to check out book. You may need to create an account, return overdue books, or pay outstanding library fees before you can check out this book."
  END IF    
END FUNCTION

---

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

--My version--

CLASS bankAccount
 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
    IF balance > amount THEN
      SET balance to balance - amount
    END
 END FUNCTION


CLASS specialOffers
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkingAccountOffer
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION
END


Programming Questions

You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.
Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

var prices = [1,4,3,6,5]

function addArrayValues(numbers){
  var reducedarray = numbers.reduce((total, numbers) => 
  total + numbers
  );
  return reducedarray;
}

function isPerfectSquare(integerArray){
  var sum = addArrayValues(integerArray);
  if (sum > 0 && Math.sqrt(sum) % 1 === 0){
    return Math.sqrt(sum);
  }
    return "This number is not a perfect square."
}


7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.


function hasDuplicates(integerArray) {
  var counts = [];
  for (var i = 0; i <= integerArray.length; i++) {
    if (counts[integerArray[i]] === undefined) {
      counts[integerArray[i]] = 1;
    } 
    else {
      return true;
    }
  }
  return false;
}

Extra Credit
8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

I'll come back to this one when I make up some lost time. :)
